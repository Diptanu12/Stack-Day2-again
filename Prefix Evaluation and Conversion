Prefix Evaluation and Conversion
You are given a prefix expression.

You are required to evaluate it and print it's value.

You are required to convert it to infix and print it.

You are required to convert it to postfix and print it.

Note

Use brackets in infix expression for indicating precedence. Check sample input output for more details.

Input Format
The first line of input contains a string str, prefix expression.

Output Format
You need to output 3 lines,

The value of the expression.

It's infix expression.

It's postfix expression.

Example 1
Input

-+2/*6483
Output

2
((2+((6*4)/8))-3)
264*8/+3-
Explanation

The value for the given prefix expression is 2, its infix expression is ((2+((64)/8))-3) and its postfix expression is 2648/+3-.

Example 2
Input

++123
Output

6
((1+2)+3)
12+3+
Explanation

The given string ab has 2 permutations ab and ba.

Constraints
Expression is a valid prefix expression

The only operators used are +, -, *, /

All operands are single digit numbers.

Topics
Stacks


import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        String str = scn.nextLine();
        valueOfExpression(str);
    }

    public static void valueOfExpression(String str) {
        Stack<Integer> evalStack = new Stack<>();
        Stack<String> infixStack = new Stack<>();
        Stack<String> postfixStack = new Stack<>();

        for (int i = str.length() - 1; i >= 0; i--) {
            char ch = str.charAt(i);

            if (Character.isDigit(ch)) {
                evalStack.push(ch - '0');
                infixStack.push(ch + "");
                postfixStack.push(ch + "");
            } else {
                int v1 = evalStack.pop();
                int v2 = evalStack.pop();
                int res = evaluate(v1, v2, ch);
                evalStack.push(res);

                String iv1 = infixStack.pop();
                String iv2 = infixStack.pop();
                String infixExp = "(" + iv1 + ch + iv2 + ")";
                infixStack.push(infixExp);

                String pv1 = postfixStack.pop();
                String pv2 = postfixStack.pop();
                String postfixExp = pv1 + pv2 + ch;
                postfixStack.push(postfixExp);
            }
        }

        System.out.println(evalStack.peek());
        System.out.println(infixStack.peek());
        System.out.println(postfixStack.peek());
    }

    private static int evaluate(int v1, int v2, char op) {
        switch (op) {
            case '+':
                return v1 + v2;
            case '-':
                return v1 - v2;
            case '*':
                return v1 * v2;
            case '/':
                return v1 / v2;
            default:
                return 0;
        }
    }
}
